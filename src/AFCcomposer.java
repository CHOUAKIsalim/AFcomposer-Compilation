/* Generated By:JavaCC: Do not edit this line. AFCcomposer.java */
import java.util.ArrayList;

public class AFCcomposer implements AFCcomposerConstants {
        public static ArrayList<Composant> composants  =  new ArrayList<Composant>();
        public static void main(String args []) throws ParseException
        {
        AFCcomposer parser = new AFCcomposer(System.in);
                while (true)
            {
                      try
                      {
                                AFCcomposer.start();
                      }
                      catch (Error e)
                      {
                                System.out.println("Oops.");
                                System.out.println(e.getMessage());
                                break;
                      }
                      catch (Exception e)
                      {
                                System.out.println("NOK.");
                                System.out.println(e.getMessage());
                                AFCcomposer.ReInit(System.in);
                      }
            }
        }

  static final public void start() throws ParseException {
    jj_consume_token(DEBUT);
    Interface();
  }

  static final public void Interface() throws ParseException {
    jj_consume_token(INTERFACE);
    composantdeclaration();
  }

  static final public void composantdeclaration() throws ParseException {
        Token nom, type, proprietaire;
        Composant comp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMP:
      jj_consume_token(COMP);
      nom = jj_consume_token(ID);
      jj_consume_token(DeuxPoints);
      type = jj_consume_token(TYPE);
                        int i=0;
                boolean trouv=false;
                while(!trouv && i<composants.size())
                {
                                if(composants.get(i).getNom().compareTo(nom.toString())==0)
                                {
                                        trouv = true;
                                        //Composant déja existant ! ! ! ! 
                                }
                                i++;
                }
                        if(!trouv)
                        {
                                comp = new Composant(nom.toString(),type.toString());
                                composants.add(comp);
                        }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROPRIETAIRE:
        proprietaire = jj_consume_token(PROPRIETAIRE);
                i=0;
                trouv=false;
                while(!trouv && i<composants.size()-1)
                {
                                if(composants.get(i).getNom().compareTo(proprietaire.toString())==0)
                                {
                                        trouv = true;
                                        composants.get(i).setProprietaire(composants.get(i));
                                }
                                i++;
                }
                        if(!trouv)
                        {
                                //Proprietaire non existant
                        }
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEPARATEUR:
        jj_consume_token(SEPARATEUR);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      startPropriete();
      break;
    case INIT:
      initialisation();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void startPropriete() throws ParseException {
    jj_consume_token(PROP);
    propriete();
  }

  static final public void propriete() throws ParseException {
        Token nom, type;
        ArrayList<String> types = new ArrayList<String>();
        ArrayList<String> noms = new ArrayList<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      nom = jj_consume_token(ID);
                    noms.add(nom.toString());
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 33:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        jj_consume_token(33);
        nom = jj_consume_token(ID);
                int i=0;
                boolean trouv=false;
                while(!trouv && i<noms.size())
                {
                                if(noms.get(i).compareTo(nom.toString())==0)
                                {
                                        trouv = true;
                                }
                                i++;
                }
                if(!trouv)
                {
                                noms.add(nom.toString());
                        }
                        else
                        {
                                        //deux attributs avec le meme nom
                        }
      }
      jj_consume_token(DeuxPoints);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROPERTYTYPE:
        type = jj_consume_token(PROPERTYTYPE);
                                types.add(type.toString());
        break;
      case ACCOLADEOuvrante:
        jj_consume_token(ACCOLADEOuvrante);
        type = jj_consume_token(ID);
                                           types.add(type.toString());
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 33:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_2;
          }
          jj_consume_token(33);
          type = jj_consume_token(ID);
                        int i=0;
                boolean trouv=false;
                while(!trouv && i<types.size())
                {
                                if(types.get(i).compareTo(type.toString())==0)
                                {
                                        trouv = true;
                                }
                                i++;
                }
                if(!trouv)
                {
                                types.add(type.toString());
                        }
                        else
                        {
                                        //deux attributs avec le meme nom
                        }
        }
        jj_consume_token(ACCOLADEFermante);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEPARATEUR);
                composants.get(composants.size()-1).ajouterProprietes(noms,types);
      propriete();
      break;
    case EVT:
      startEvent();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void startEvent() throws ParseException {
    jj_consume_token(EVT);
    event();
  }

  static final public void event() throws ParseException {
        Token nom,type=null,variable=null,valeur=null,parametre=null;
        int condition = 0,parametrePresence = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOMACTIONUTILISATEUR:
      nom = jj_consume_token(NOMACTIONUTILISATEUR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROPRIETAIRE:
        parametre = jj_consume_token(PROPRIETAIRE);
                                                                parametrePresence=1;
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(ACCOLADEOuvrante);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        jj_consume_token(IF);
        variable = jj_consume_token(ID);
        type = jj_consume_token(COMPARAISON);
        valeur = jj_consume_token(ID);
        jj_consume_token(THEN);
                                                                                                                                                                            condition=1;
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
                if(condition==1 && parametrePresence==0)
                {
                        int res = composants.get(composants.size()-1).ajouterConditionEvenement(nom.toString(),variable.toString(),valeur.toString(),type.toString());
                        if(res==0)
                        {
                                //Propriete non définie 
                        }
                        else if (res==-1)
                        {
                                //Valeur non compatible
                        }
                }
                else if(condition==0 && parametrePresence==0)
                {
                        composants.get(composants.size()-1).ajouterAffectationEvenement(nom.toString());
                }
                else if(condition==1 && parametrePresence==1)
                {
                        int res = composants.get(composants.size()-1).ajouterConditionEvenementParametre(nom.toString(),variable.toString(),valeur.toString(),type.toString(),parametre.toString().substring(1,parametre.toString().length()-1));
                        if(res==0)
                        {
                        //Propriete non définie 
                        }
                        else if (res==-1)
                        {
                                //Valeur non compatible
                        }
                }
      EventAction(nom.toString());
      jj_consume_token(ACCOLADEFermante);
      event();
      break;
    case COMP:
    case INIT:
      composantdeclaration();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void EventAction(String nomEvent) throws ParseException {
        Token variable,valeur=null,number=null,valeurString=null;
        int egal = 0;
        int plus = 0;
        int nombre = 0;
        int res=0;
    variable = jj_consume_token(ID);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      jj_consume_token(34);
      jj_consume_token(ID);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AFFECTATIONOperation:
      jj_consume_token(AFFECTATIONOperation);
      valeur = jj_consume_token(ID);
                                                                  egal = 1 ;
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
                                                                                        plus=1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOMBRE:
        number = jj_consume_token(NOMBRE);
                                                                                                                     nombre=1;
        break;
      case APOSTROPHE:
        jj_consume_token(APOSTROPHE);
        valeurString = jj_consume_token(ID);
        jj_consume_token(APOSTROPHE);
                                                nombre=0;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEPARATEUR:
      jj_consume_token(SEPARATEUR);
      EventAction(nomEvent);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
                if(egal==1 && plus==0)
                {
                        res=composants.get(composants.size()-1).ajouterAffectation(nomEvent,variable.toString(),valeur.toString());
                }
                else if(egal==0 && plus==1)
                {
                        if(nombre==1)
                        {
                                res = composants.get(composants.size()-1).ajouterIncrementationNombre(nomEvent,variable.toString(),number.toString());
                        }
                }
                else if(egal==1 & plus==1 && nombre==0)
                {
                        res=composants.get(composants.size()-1).ajouterIncrementationString(nomEvent,variable.toString(),valeurString.toString());
                }
                if(res==-1)
                {
                        //Valeur non compatible
                }
                else if(res==0)
                {
                        //Variable non existante
                }
  }

  static final public void initialisation() throws ParseException {
    jj_consume_token(INIT);
    actionInit();
  }

  static final public void actionInit() throws ParseException {
        Token nomComposant, nomPropriete, valeurPropriete;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      nomComposant = jj_consume_token(ID);
      jj_consume_token(ACCESATTRIBUT);
      nomPropriete = jj_consume_token(ID);
      jj_consume_token(AFFECTATIONOperation);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        valeurPropriete = jj_consume_token(ID);
        break;
      case NOMBRE:
        valeurPropriete = jj_consume_token(NOMBRE);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEPARATEUR);
        int i=0;
        boolean trouv=false;
        while(!trouv && i<composants.size())
        {
                        if(composants.get(i).getNom().compareTo(nomComposant.toString())==0)
                        {
                                trouv = true;
                                int res = composants.get(i).initialiserPropriete(nomPropriete.toString(), valeurPropriete.toString());
                                if(res==1)
                                {
                                        //Réussi
                                }
                                else if(res==0)
                                {
                                        //Attribut non existant 
                                }
                                else if(res==-1)
                                {
                                        //Valeur non compatible
                                }
                        }
                        i++;
        }
                if(!trouv)
                {
                        //Composant non existant
                }
      actionInit();
      break;
    case ACT:
      actions();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void actions() throws ParseException {
    jj_consume_token(ACT);
    action();
    fin();
  }

  static final public void action() throws ParseException {
    element();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEPARATEUR:
      case PLUS:
      case TILDE:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEPARATEUR:
        jj_consume_token(SEPARATEUR);
        break;
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      element();
    }
  }

  static final public void element() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOMACTIONUTILISATEUR:
      operation();
      break;
    case ACCOLADEOuvrante:
      jj_consume_token(ACCOLADEOuvrante);
      action();
      jj_consume_token(ACCOLADEFermante);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void operation() throws ParseException {
    jj_consume_token(NOMACTIONUTILISATEUR);
    jj_consume_token(PROPRIETAIRE);
  }

  static final public void fin() throws ParseException {
    jj_consume_token(FIN);
                System.out.println(composants.size());
                for(int i=0; i<composants.size(); i++)
                {
                        System.out.println(composants.get(i).getNom()+"  "+composants.get(i).getType());
                        composants.get(i).afficherProprietes();
                }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AFCcomposerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x8000000,0x1100,0x0,0x0,0x2040000,0x400400,0x10000,0x8000,0x81100,0x0,0x1000000,0x40200000,0x20000000,0x8000000,0x600000,0x402000,0x28000000,0x28000000,0x2080000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,};
   }

  /** Constructor with InputStream. */
  public AFCcomposer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AFCcomposer(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AFCcomposerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AFCcomposer(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AFCcomposerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AFCcomposer(AFCcomposerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AFCcomposerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
